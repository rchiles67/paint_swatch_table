<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Paint colour swatches, hex and RGB</title>
<style>
  :root { --bg:#fafafa; --card:#ffffff; --muted:#666; --border:#ddd; --accent:#2b6cb0; }
  html,body { margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial; background:var(--bg); color:#111; }
  header { padding:14px 16px; background:var(--card); border-bottom:1px solid var(--border); position:sticky; top:0; z-index:10; }
  h1 { margin:0 0 6px 0; font-size:18px; }
  .controls { display:flex; gap:8px; flex-wrap:wrap; }
  button, label.buttonish {
    border:1px solid var(--border); background:#fff; padding:8px 10px; border-radius:8px; cursor:pointer; font-size:14px;
  }
  button.primary { background:var(--accent); color:#fff; border-color:var(--accent); }
  button:disabled { opacity:.6; cursor:not-allowed; }
  main { padding:12px 16px 60px 16px; }
  .table-wrap { overflow:auto; background:var(--card); border:1px solid var(--border); border-radius:12px; }
  table { width:100%; border-collapse:collapse; min-width:900px; }
  thead th {
    position:sticky; top:0; background:#f5f5f7; font-weight:600; text-align:left; font-size:13px; color:#333; border-bottom:1px solid var(--border);
    padding:10px 8px;
  }
  tbody td { border-bottom:1px solid var(--border); padding:8px; font-size:14px; vertical-align:middle; }
  tbody tr.dragging { opacity:.5; }
  .swatch {
    width:46px; height:28px; border:1px solid #c8c8c8; border-radius:6px; box-shadow:inset 0 0 0 1px rgba(0,0,0,.03);
  }
  .row-actions { display:flex; gap:6px; }
  .muted { color:var(--muted); font-size:12px; }
  .drag { cursor:grab; user-select:none; font-size:18px; opacity:.7; }
  input[type="text"] { width:100%; box-sizing:border-box; padding:6px 7px; border:1px solid var(--border); border-radius:6px; background:#fff; }
  input.hex { font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace; }
  input.rgb { width:68px; }
  .row-tools { display:flex; align-items:center; gap:8px; }
  .hint { margin-top:8px; }
  .file-hide { display:none; }
</style>
</head>
<body>
<header>
  <h1>Paint colours table, swatches, hex and RGB</h1>
  <div class="controls">
    <button class="primary" id="addRowBtn">Add row</button>
    <button id="saveBtn">Save</button>
    <button id="resetBtn" title="Replace current list with the defaults in this file">Reset to defaults</button>
    <button id="exportBtn">Export JSON</button>
    <label class="buttonish" for="importFile">Import JSON</label>
    <input id="importFile" class="file-hide" type="file" accept="application/json">
    <span class="muted hint">Tip, drag the handle at the left to reorder, everything is saved to your device</span>
  </div>
</header>

<main>
  <div class="table-wrap">
    <table id="paintTable">
      <thead>
        <tr>
          <th style="width:34px">⇅</th>
          <th style="width:140px">Brand</th>
          <th style="width:200px">Name</th>
          <th style="width:140px">Range or Code</th>
          <th style="width:120px">Hex</th>
          <th style="width:180px">RGB</th>
          <th style="width:70px">Swatch</th>
          <th style="width:120px">Actions</th>
        </tr>
      </thead>
      <tbody id="tbody">
        <!-- rows injected by JS -->
      </tbody>
    </table>
  </div>
  <p class="muted" style="margin-top:10px">
    Notes, values are approximate for some third party brands, always test with real paint
  </p>
</main>

<script>
const KEY = "paintTableDataV1";

const defaultRows = [
  // Dulux Heritage, whites and neutrals we discussed
  {brand:"Dulux Heritage", name:"Indian White", code:"DHT018", hex:"#E8E8E5", rgb:"232,232,229"},
  {brand:"Dulux Heritage", name:"Mallow White", code:"DHT085", hex:"#EAE8E5", rgb:"234,232,229"},
  {brand:"Dulux Heritage", name:"Piano White", code:"DHT031", hex:"#F1EDE0", rgb:"241,237,224"},
  {brand:"Dulux Heritage", name:"Marble White", code:"DHT086", hex:"#EAE9EA", rgb:"234,233,234"},
  {brand:"Dulux Heritage", name:"Chalk White", code:"DHT004", hex:"#E6E9E9", rgb:"230,233,233"},
  {brand:"Dulux Heritage", name:"Chiltern White", code:"40YY 73/028", hex:"#DFDCD5", rgb:"223,220,213"},
  {brand:"Dulux Heritage", name:"Ochre White", code:"DHT025", hex:"#ECE6D8", rgb:"236,230,216"},
  {brand:"Dulux Heritage", name:"Linen White", code:"DHT022", hex:"#EDE8E2", rgb:"237,232,226"},
  {brand:"Dulux Heritage", name:"Stone Green", code:"DHT039", hex:"#B6B4A9", rgb:"182,180,169"},
  {brand:"Dulux Heritage", name:"Raw Cashmere", code:"40YY 60/103", hex:"#D4C9B5", rgb:"212,201,181"},
  {brand:"Dulux Heritage", name:"Pebble Grey", code:"1780009", hex:"#BAB3AC", rgb:"186,179,172"},

  // Other brands you asked about, with practical matches
  {brand:"Dulux (Std)", name:"Whisper White", code:"SW1C2", hex:"#EBE9E0", rgb:"235,233,224"},
  {brand:"Dulux (Std)", name:"Frosted Dawn", code:"", hex:"#F7F6EE", rgb:"247,246,238"},
  {brand:"Valspar", name:"Goose Feathers", code:"8006-2B", hex:"#D6D2CA", rgb:"214,210,202"},
  {brand:"GoodHome, B&Q", name:"Cancún", code:"", hex:"#D8D2C4", rgb:"216,210,196"},

  // Placeholder if you want to fill later
  {brand:"Dulux Heritage", name:"Romance White", code:"", hex:"", rgb:""}
];

const tbody = document.getElementById("tbody");

function hexToRgbStr(hex) {
  const m = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex.trim());
  if (!m) return "";
  return `${parseInt(m[1],16)},${parseInt(m[2],16)},${parseInt(m[3],16)}`;
}
function rgbStrToHex(rgbStr) {
  const parts = rgbStr.split(",").map(s=>parseInt(s.trim(),10));
  if (parts.length!==3 || parts.some(n=>Number.isNaN(n) || n<0 || n>255)) return "";
  const toHex = n => n.toString(16).padStart(2,"0");
  return "#" + toHex(parts[0]) + toHex(parts[1]) + toHex(parts[2]);
}

function loadData() {
  try {
    const raw = localStorage.getItem(KEY);
    if (!raw) return defaultRows.slice();
    const parsed = JSON.parse(raw);
    if (!Array.isArray(parsed)) throw 0;
    return parsed;
  } catch { return defaultRows.slice(); }
}

function saveData() {
  const rows = [...tbody.querySelectorAll("tr")].map(tr => {
    const get = sel => tr.querySelector(sel).value.trim();
    return {
      brand: get(".inp-brand"),
      name:  get(".inp-name"),
      code:  get(".inp-code"),
      hex:   get(".inp-hex"),
      rgb:   get(".inp-rgb")
    };
  });
  localStorage.setItem(KEY, JSON.stringify(rows));
}

function setSwatch(tr) {
  const hex = tr.querySelector(".inp-hex").value.trim();
  const sw = tr.querySelector(".swatch");
  sw.style.background = hex ? hex : "repeating-conic-gradient(#eee 0 25%, #fff 0 50%) 50% / 8px 8px";
}

function addRow(obj = {brand:"",name:"",code:"",hex:"",rgb:""}) {
  const tr = document.createElement("tr");
  tr.draggable = true;
  tr.innerHTML = `
    <td class="row-tools"><span class="drag" title="Drag to reorder">⋮⋮</span></td>
    <td><input class="inp-brand" type="text" placeholder="Brand" value="${obj.brand || ""}"></td>
    <td><input class="inp-name" type="text" placeholder="Colour name" value="${obj.name || ""}"></td>
    <td><input class="inp-code" type="text" placeholder="Range, code" value="${obj.code || ""}"></td>
    <td><input class="inp-hex hex" type="text" placeholder="#RRGGBB" value="${obj.hex || ""}"></td>
    <td>
      <div style="display:flex; gap:6px; align-items:center;">
        <input class="inp-rgb rgb" type="text" placeholder="R,G,B" value="${obj.rgb || ""}">
        <button class="mini btnSync" title="Sync RGB from hex">↔</button>
      </div>
    </td>
    <td><div class="swatch" title="Swatch"></div></td>
    <td>
      <div class="row-actions">
        <button class="mini btnDup" title="Duplicate">Copy</button>
        <button class="mini btnDel" title="Delete">Delete</button>
      </div>
    </td>
  `;
  // style for mini buttons
  tr.querySelectorAll(".mini").forEach(b=>{
    b.style.border = "1px solid var(--border)";
    b.style.background = "#fff";
    b.style.padding = "6px 8px";
    b.style.borderRadius = "6px";
    b.style.cursor = "pointer";
    b.style.fontSize = "12px";
  });

  // events
  tr.addEventListener("dragstart", e => {
    tr.classList.add("dragging");
    e.dataTransfer.effectAllowed = "move";
  });
  tr.addEventListener("dragend", () => {
    tr.classList.remove("dragging");
    saveData();
  });

  ["input","change"].forEach(evt=>{
    tr.querySelector(".inp-hex").addEventListener(evt, () => {
      const hex = tr.querySelector(".inp-hex").value.trim();
      if (hex.startsWith("#") && hex.length === 7) {
        tr.querySelector(".inp-rgb").value = hexToRgbStr(hex);
      }
      setSwatch(tr);
    });
    tr.querySelector(".inp-rgb").addEventListener(evt, () => {
      const hex = rgbStrToHex(tr.querySelector(".inp-rgb").value.trim());
      if (hex) tr.querySelector(".inp-hex").value = hex;
      setSwatch(tr);
    });
    tr.querySelector(".inp-brand").addEventListener(evt, saveData);
    tr.querySelector(".inp-name").addEventListener(evt, saveData);
    tr.querySelector(".inp-code").addEventListener(evt, saveData);
    tr.querySelector(".inp-hex").addEventListener(evt, saveData);
    tr.querySelector(".inp-rgb").addEventListener(evt, saveData);
  });

  tr.querySelector(".btnDel").addEventListener("click", () => {
    tr.remove();
    saveData();
  });
  tr.querySelector(".btnDup").addEventListener("click", () => {
    addRow({
      brand: tr.querySelector(".inp-brand").value,
      name:  tr.querySelector(".inp-name").value,
      code:  tr.querySelector(".inp-code").value,
      hex:   tr.querySelector(".inp-hex").value,
      rgb:   tr.querySelector(".inp-rgb").value
    });
    saveData();
  });
  tr.querySelector(".btnSync").addEventListener("click", () => {
    const hex = tr.querySelector(".inp-hex").value.trim();
    if (hex) tr.querySelector(".inp-rgb").value = hexToRgbStr(hex);
    else {
      const rgb = tr.querySelector(".inp-rgb").value.trim();
      const h = rgbStrToHex(rgb);
      if (h) tr.querySelector(".inp-hex").value = h;
    }
    setSwatch(tr);
    saveData();
  });

  tbody.appendChild(tr);
  setSwatch(tr);
}

function setupDragAndDrop() {
  tbody.addEventListener("dragover", e => {
    e.preventDefault();
    const dragging = tbody.querySelector(".dragging");
    if (!dragging) return;
    const after = Array.from(tbody.querySelectorAll("tr:not(.dragging)"))
      .find(row => {
        const rect = row.getBoundingClientRect();
        return e.clientY <= rect.top + rect.height / 2;
      });
    if (after) tbody.insertBefore(dragging, after);
    else tbody.appendChild(dragging);
  });
}

function rebuildFrom(data) {
  tbody.innerHTML = "";
  data.forEach(r => addRow(r));
}

document.getElementById("addRowBtn").addEventListener("click", () => {
  addRow();
  saveData();
});

document.getElementById("saveBtn").addEventListener("click", saveData);

document.getElementById("resetBtn").addEventListener("click", () => {
  if (confirm("Reset table to defaults in this file, current list will be replaced")) {
    localStorage.removeItem(KEY);
    rebuildFrom(defaultRows);
    saveData();
  }
});

document.getElementById("exportBtn").addEventListener("click", () => {
  const blob = new Blob([localStorage.getItem(KEY) || "[]"], {type:"application/json"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "paint-colours.json";
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
});

document.getElementById("importFile").addEventListener("change", e => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = () => {
    try {
      const data = JSON.parse(reader.result);
      if (!Array.isArray(data)) throw 0;
      localStorage.setItem(KEY, JSON.stringify(data));
      rebuildFrom(data);
    } catch {
      alert("File did not look like a table JSON array");
    }
  };
  reader.readAsText(file);
  e.target.value = "";
});

// init
rebuildFrom(loadData());
setupDragAndDrop();
</script>
</body>
</html>